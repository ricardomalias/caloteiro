{"version":3,"sources":["Menu.js","serviceWorker.js","index.js"],"names":["Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createBankSlip","bind","assertThisInitialized","state","clicked","indexClicked","index","setState","_this2","items","_loop","i","push","react_default","a","createElement","key","onClick","toFixed","replace","content","className","alert","align","src","alt","href","index_es","icon","faPhone","size","faWhatsapp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Menu_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAiGeA,cA1FX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKU,MAAQ,CACTC,SAAS,EACTC,aAAc,MALHZ,8EASJa,GACXV,KAAKW,SAAS,CACVH,SAAS,EACTC,aAAcC,qCASlB,IALK,IAAAE,EAAAZ,KACCa,EAAQ,GADTC,EAAA,SAKIC,GACLF,EAAMG,KACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,GACNE,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAQT,EAAKR,eAAeW,KAA7C,aACeA,EADf,YAND,KAOmCA,GAAGO,QAAQ,GAAGC,QAAQ,IAAK,SAJpER,EAAI,EAAGA,GAFA,EAEcA,IAAKD,EAA1BC,GAST,IAAIS,EAAUP,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBAAf,0BAEIR,EAAAC,EAAAC,cAAA,WAFJ,wHAbW,MAgBuGG,QAAQ,GAAGC,QAAQ,IAAK,MAE1IN,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBACVZ,IAqBT,OAjBIb,KAAKO,MAAMC,UACXgB,EAAUP,EAAAC,EAAAC,cAAA,8CAxBC,KAyBsCnB,KAAKO,MAAME,cAAca,QAAQ,GAAGC,QAAQ,IAAK,KACtFN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAHF,sBAKEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WANF,6BAQEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAQK,MAAM,kDAA/B,sBAOZT,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACXR,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,SAASF,UAAU,UAC1BR,EAAAC,EAAAC,cAAA,OAAKS,IAAI,uCAAuCC,IAAI,cAG5DZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACVzB,KAAKO,MAAMC,QACXgB,GAELP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACXR,EAAAC,EAAAC,cAAA,KAAGW,KAAK,sBACJb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAiBC,KAAMC,IAASC,KAAK,OACrCjB,EAAAC,EAAAC,cAAA,WAFJ,aAMJF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACXR,EAAAC,EAAAC,cAAA,KAAGW,KAAK,kHACJb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAiBC,KAAMG,IAAYD,KAAK,OACxCjB,EAAAC,EAAAC,cAAA,WAFJ,sBA/ELiB,IAAMC,WCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ed3d9d51.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Menu.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport { faWhatsapp} from '@fortawesome/free-brands-svg-icons'\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createBankSlip = this.createBankSlip.bind(this);\r\n        this.state = {\r\n            clicked: false,\r\n            indexClicked: null\r\n        };\r\n    }\r\n\r\n    createBankSlip(index) {\r\n        this.setState({\r\n            clicked: true,\r\n            indexClicked: index\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const items = []\r\n        const amount = 1800\r\n        const parcels = 3\r\n\r\n        for (let i = 1; i <= parcels; i++) {\r\n            items.push(\r\n                    <div key={i}>\r\n                        <button onClick={() => { this.createBankSlip(i) } }>\r\n                            Boleto em {i}x de R$ {(amount/i).toFixed(2).replace('.', ',')}\r\n                        </button>\r\n                    </div>)\r\n        }\r\n\r\n        let content = <div>\r\n            <div className=\"content-message\">\r\n                Bom dia caro(a) Geroudo\r\n                <br/>\r\n                Conforme negociado com nossa central, seguem condições para a liquidação de sua dívida no valor de R$ {amount.toFixed(2).replace('.', ',')}\r\n            </div>\r\n            <div className=\"container-button\">\r\n                {items}\r\n            </div>\r\n        </div>\r\n\r\n        if (this.state.clicked) {\r\n            content = <div>\r\n                        O Valor da sua Parcela é R$ {(amount/this.state.indexClicked).toFixed(2).replace('.', ',')}\r\n                        <br/>\r\n                        <br/>\r\n                        Seu código é:\r\n                        <br/>\r\n                        <br/>\r\n                        34191528956540000000000000\r\n                        <br/>\r\n                        <br/>\r\n                        <button onClick={() => { alert('código 34191528956540000000000000 copiado') }}>\r\n                            Copiar código\r\n                        </button>\r\n                    </div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"header\">\r\n                    <div align=\"center\" className=\"banner\">\r\n                        <img src=\"http://talkip.com.br/images/logo.png\" alt=\"talk ip\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    {this.state.clicked}\r\n                    {content}\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <div className=\"col\">\r\n                        <a href=\"tel:+5511975685680\">\r\n                            <FontAwesomeIcon icon={faPhone} size=\"2x\" />\r\n                            <br/>\r\n                            Telefone\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <a href=\"https://api.whatsapp.com/send?phone=5511975685680&text=vou pagar os 14 meses de aluguel que estão atrasados\">\r\n                            <FontAwesomeIcon icon={faWhatsapp} size=\"2x\" />\r\n                            <br/>\r\n                            Whatsapp\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Menu from './Menu';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Menu />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}